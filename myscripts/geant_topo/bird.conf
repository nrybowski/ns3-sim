# Configure logging
#log "/var/log/bird.log" { debug, trace, info, remote, warning, error, auth, fatal, bug };
log "/var/log/bird.log" all;

# Set router ID. It is a unique identification of your router, usually one of
# IPv4 addresses of the router. It is recommended to configure it explicitly.
router id 0.0.0.1;

# The Device protocol is not a real routing protocol. It does not generate any
# routes and it only serves as a module for getting information about network
# interfaces from the kernel. It is necessary in almost any configuration.
protocol device {
}

# The direct protocol is not a real routing protocol. It automatically generates
# direct routes to all network interfaces. Can exist in as many instances as you
# wish if you want to populate multiple routing tables with direct routes.
protocol direct {
	disabled;		# Disable by default
	ipv4;			# Connect to default IPv4 table
	ipv6;			# ... and to default IPv6 table
}

# The Kernel protocol is not a real routing protocol. Instead of communicating
# with other routers in the network, it performs synchronization of BIRD
# routing tables with the OS kernel. One instance per table.
protocol kernel {
	ipv4 {			# Connect protocol to IPv4 table by channel
#	      table master4;	# Default IPv4 table is master4
#	      import all;	# Import to table, default is import all
	      export all;	# Export to protocol. default is export none
	};
#	learn;			# Learn alien routes from the kernel
#	kernel table 10;	# Kernel table to synchronize with (default: main)
}

# Another instance for IPv6, skipping default options
protocol kernel {
	ipv6 { export all; };
}

# Static routes (Again, there can be multiple instances, for different address
# families and to disable/enable various groups of static routes on the fly).
protocol static {
	ipv4;			# Again, IPv4 channel with default options
}

# OSPF example, both OSPFv2 and OSPFv3 are supported
protocol ospf v3 {
	debug all;
	ipv6 {
	  import all;
	  export where source = RTS_STATIC;
	};
	area 0 {
		interface "sim*" {
			type broadcast;		# Detected by default
			cost 10;		# Interface metric
			hello 5;		# Default hello perid 10 is too long
		};
		interface "tun*" {
			type ptp;		# PtP mode, avoids DR selection
			cost 100;		# Interface metric
			hello 5;		# Default hello perid 10 is too long
		};
		interface "dummy0" {
			stub;			# Stub interface, just propagate it
		};
	};
}
